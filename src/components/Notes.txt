CREATE_REACT_APP
package-json lock/yarn lock - fix the versions so that other dev-s
npm/yarn install the same versions and the app doesn't crush.

callback is the function send as an argument to another function.
When One function referring to another one for it's finishing.

Паттерны проектирования (собесы):
- observer:
(Observer is a behavioral design pattern that lets you define a subscription mechanism to notify multiple
objects about any events that happen
to the object they’re observing.)
Parts: publisher, subscribers.
Example: по этому паттерну работает button.addEventListener (as well as onClick, onChange)

Инкапсуляция - сокрытие деталей. Мы используем только интерфейс объкта.
_key: value -> private property

Cеттеры и геттеры - для нас это просто положи и достань. Но под капотом может быть сокрыта сложная логика =>
вместо простого присвоения, у объекта пользуем сеттер

THIS
this указывает на объект, который его ВЫЗЫВАЕТ. Пример:
state.addPost() - state вызывает addPost => this будет указывать на state
state.addPost - просто указание на метод без вызова. Значит this для addPost будет тот, кто его вызвал.

BIND
Если я хочу связать контекст this с определенный объектом, я вызываю метод bind.
Продолжение примера:  Хочу связать state.addPost с объектом state =>
state.addPost.bind(state). Все, теперь, если внутри f addPost будет this, он ссылается на state.

1 create a folder for reducers
2 create reducers (profile, dialog, sidebar)
3 reducer takes state and action;
do smth with STATE and return state (do not include observer)
4 export reducers
5 now inside dispatch add each reducer.
It'll be checked every time action id dispatched;
6 call callsubscriber to rerender the tree
    7. change if to cases
    8. Pass action creators to reducers.

REDUX
terminology
action - obj that has type
1 add reducers to store
- combineReducers()
2 initialize initial state following ex:

sum (a=1, b=1) {}
return a+b //
sum() => if no parameters passed, default 1 ans 1 will be used.
 the same logic is with initial state:
 const profileReducer = (state = initialState, action )

РАНДОМ
создаем let refContainer = React.createRef()
    //получает нативный DOM-элемент, т.е в ref мы храним
        //ссылки на узел DOM
       в любом месте указываем <textarea ref={refContainer}>
ассинхронный значит где-то в стороне, "сайд эффект".

let carriedSum = _.curry(sum); // используем _.curry из lodash ->
библионета, которая предоставляет фун-и, позволяющие эффектифнее создавать программу.

Enterprise разработка — разработка программных продуктов под требования конкретного заказчика.

PURE FUNCTION
удовлетворяет усл-ям:
- нет сайд эффектов
- использует только приходязие аргументы.

Pure functions are for producing some output based on given inputs. A function maps input values to output values.
(идемпатентность, детерминированность) функция принимает одни данные и возвращает результат, определенный именно этими даннвми.
Если придут другие данные - результат будет другой, определенный именно ЭТИМИ даннвми.
REACT: ф функцию приходят props и возвр. JSX.(props -> functional component -> JSX).
Детерминироанная функция - она чистая , сайд эффектов (влияние глобальные стейтов, которые м измениться).
array - это объекты, .push, toUpperCase, splice - не меня.т сам объект, поэтому объект остается равен себе же.
Connect, React такие изменения не отлавливает и перерсовку не делает.
PF shouldn't include:
- api calls;
- modification of parameters;
- change DOM directly;
- change outer scope variables;


ГЛУБОКОЕ И ПОВЕРХНОСТНОЕ КОПИРОВАНИЕ
Мы редьюсером не имеем право ничего менять. Он должен пушить и менять только копию.

For example:
        switch() {
        case:
        ...
        let stateCopy = {...state}
        stateCopy.posts = {...stateCopy.posts}
        stateCopy.posts.push(newPost);
return stateCopy
} || проще запись: return {...state, posts: [...state.posts, newPost]} - буквально говорим:
"сделайт стейта такимЖ он как старый, но св-во postData : это скопированная постдата, с дабовленным новым постом
, а св-во newPostText, который примитив, просто переопределели".

Еще пример:
return
...state,
...action.data - те стоит после стейта, обновленные данные перезатрут старые;

ПРАВИЛА при разработке:
- иммутабельность: ф-я не должна изменять приходящие к ней данные
(e.g reducer д. брать стейт и менять action-ом копию этого стейта, оригинальный объект не меняем);
- reducers must be pure functions;
- в моем приложении я придерживаюсь концепции: 1 page - 1 reducer;


REACT-REDUX -- прослойка м-у BBL и UI
- Provider is given to “provide” the store to its child components.
- The connect() function connects a React component to a Redux store.
- connect(mstp, mdtp)(component) - создает контейнер для нашей презентационной компоненты,
чтобы она пользовалась данными стора через пропсы
- mapStateToProps - преобразует часть стейта в пропсы
- mapDispatchToProps - возвращается коллбэки, нужные нашей функции.

Классы нужны для создания однотипных объектов

ФУНКЦИОНАЛЬНОЕ ПРОГРАММИРОВАНИЕ - парадигма программирования, в которой важен именно результат ф-ц, а не хранение стейтов переменной.
В императивном программировании
мы можем меня состояние стейта. :
    принципы обращения с данными:
        - Иммутабельность (нельзя у объектов(в т.ч массивах) явно мнять значения);
        - чистые функции
    чем отличается от ООП подода (имеративный и декларативнй стиль):
    imperative (все расписывается детально ).

    Императивные функции могут опираться не только на аргументы, но и на состояние внешних
     по отношению к функции переменных, а также иметь побочные эффекты и менять состояние внешних переменных.
     Таким образом, в императивном программировании при вызове одной и той же функции с одинаковыми параметрами,
    но на разных этапах выполнения алгоритма, можно получить разные данные на выходе из-за влияния на функцию состояния переменных.

PURE FUNCTION
удовлетворяет усл-ям:
- нет сайд эффектов


Каррирование - это дей-е, трансформация фун-и, чтобы они принимали аргументы не как f(a, b, c), а как f(a)(b)(c).
curry(func) - обёртка function(a). Зачем? Для применения статичных данных к динамичному аргументу.

ФП в JS:
Пример: ф-я .map, которая не мутирует аррэй  - это принцип функционального программирования.
Если либовские методы, которые позволяют комбинировать функции ждя

withRouter - HOC, через него я могу добраться до компоненты без Link, NavLink

задания:
- при клике на юзера попадать на профайл пейдж с авой и описанием
сделать переход на юзерИД опциональным
если юзерИД нет, то отобрази 2ю стр

- создать auth reducer
инишл стейт как параметры (все налл: .useID, login, email, isauth)
 добавить АС к общим ас-ам (назови auth);
 - в хедере создать дивб с навлинком /login
 - создать хедер контейнер
 после вмонтирования компонента сделать запрос на сервер ...authme
- проверить если респонм дата response.data.resultCode === 0
через коннект создать еще одну  контейнерую компоненту
(state and ac попадет в пропсы);

3. follow / unfollow
on button click make post request with credentials (see documentation)
on btn click delete subscription (62/ 16 min);
- generate the access key to log in ti the platform
- add header "API-KEY": ...
--- add withCredentials - true

СLASSES
Классы нужны, чтобы создавать однотипные объекты.
When create classes, don't forget to bind this or
REMEMBER: setState is async and will return result on
parent funct completion;

ROUTES
To get id from NavLink passins use
props.match.params.id

DAL - data access layer

1. create folder "api"
import all from axios
create function getUsers () => with parameters (count = initial value, pageSize)
axios.get withCredentials true
create instanse of axios with axios.create() {
wothcredentials
API KEY
baseURL}

getIsers with parameters/URL and then return response.data
return

2. inside the component using '.then' do the stuff....

THUNKS
Функция, которая выполняет асинхронный запрос и диспатчик внутри себя экшены.
Redux Thunk middleware allows you to write action creators that return a function instead of an action.

Запись: const addPostThunkCreator = (message) => (dispatch) => {
                    dispatch(isFetching())
                        axios.post({message}).then( () => {
                        dispatch(addPost(message))}}
We can dispatch either actions or thunks ("преобразователи")
When creating a store we can crete thunk middleware (прокладочный слой):

" const enhancer = composeWithDevTools(
  applyMiddleware(thunkMiddleware.withExtraArgument({ history }))
);
export const store = createStore(rootReducer, enhancer); "

Thunks practical exercises:
1. for UsersContainer we create thunkCreator responsible for gettingUsers process;
2. we map thunk creator to props and ue it in UsersCreator;
3. install environment for redux thunks : npm i "redux-thunk";
import thunkMiddleware from "redux-thunk";
4. move delete and post to usersAPI
5 create follow thunk that will dispatch 2 sctions (followSuccess, unfollowSuccess)

fn COMPOSE - compose HOCs over the initial component (when export use default compose()(component)
LOCAL STATE
what for? on local state change Component will be re-rendered;
- нужен для UI-ных штук (цвет);
- нужен как прослойка между BLL и component;

МИГРАЦИЯ - переход на новую версию
например с косячной create-react-app на updated.

ДОКАПЫВАТЬСЯ ДО СУТИ но в рамках времени, данного на проекте как разработчику.
Дебаггаре должен работать корректно, update до последней версией скриптов (иначе, this - мб undefined, дублирование файлов и тд
в devtools).

componentDidUpdate - вызывает перерисовку компонента,
когда 1. меняется локальный стейт 2. вызывается перерисовка родителя (=предоставляются новые пропсы).

1. сделать апп классовой
2. на КомпонентДидМаунт  делать запрос на authMe
3. пропсы передавать ей через коннектом и обратить внимание на роуты
4.